[{
  "id": 1,
  "title": "Flutter takes the stage at GDC",
  "thumbnailUrl": "https://res.cloudinary.com/daily-now/image/upload/f_auto,q_auto/v1/posts/8845c55d867d7d250d67fae97a4002b8?_a=AQAEufR",
  "content": "Since the launch of the Flutter Casual Games Toolkit, Flutter has made strong progress within the game development arena. More than 15,000 new mobile games have been developed with Flutter in the last 12 months.\n\nFlutter has proven to be an appealing option for game apps of all sizes, empowering both first-time game devs like Tatsuya, who used Flutter to create Tinies Merge in his spare time and secured a spot as a top 20 finalist at Google Play‚Äôs Indie Game Festival, to the teams behind popular titles such as Trivia Crack, which has hundreds of millions of downloads across the globe!\n\nWhy Flutter for Games?\nFlutter offers compelling advantages for 2D casual games, particularly interface-driven or turn-based titles. The fact that it‚Äôs open-source eliminates licensing fees, provides deep control over game mechanics, and grants access to a rich plugin ecosystem. Flutter‚Äôs ‚Äúhot reload‚Äù feature accelerates development, while its optimized engine ensures smooth performance across devices, including browsers. With the ability to build once and deploy cross-platform, including iOS, Android, web, desktop, and Google Play Games for PC, Flutter streamlines your game‚Äôs reach. So, if you‚Äôre a game developer, don‚Äôt overlook Flutter‚Äôs potential ‚Äî try Flutter for your next game and help us spread the word!\n\n2024 and beyond: building the Flutter Game Development ecosystem together\nIn 2024, we‚Äôre dedicated to empowering you to create amazing casual game experiences with Flutter. We‚Äôll focus on:\n\nStreamlining development: Expect expanded game development resources like templates, plugin-integrations, and in-depth guides to speed up your workflow and unlock Flutter‚Äôs game development potential.\nExpanding your reach: We‚Äôre working to make deploying Flutter games on the web and other platforms even smoother, opening up new audiences for your creations.\nFoundations for the future: While 2D mobile game support is our main focus, we are keen to explore 3D capabilities as a part of Flutter GPU effort. Follow some of our early experiments to see our progress.\nA special thank you to the community\nWe are incredibly grateful to the community for your unwavering support and significant contributions, which have fueled Flutter‚Äôs remarkable growth in the game development space.\n\nWe are in awe of your work, and incredibly thankful for the many brilliant contributions, including:\n\nLuan Nico, Lukas Klingsbo, Erick Zanardo, Renan Araujo, Arron Washington, Pasha Stetsenko, Jochum van der Ploeg, Fernando Ultremare, DevKage (Flame): Your work on the Flame engine and its related projects has been transformative for Flutter game development.\nRafael Barbosa (Bonfire): Your powerful and versatile game engine is a fantastic tool for building RPG-style games.\nFilip Hr√°ƒçek: Your templates and tutorials provide an invaluable starting point for many new game developers.\nJeff Ward: Embedding Dart in other game engines opens up exciting possibilities.\nThe amazing team at @VeryGoodVentures: Your beautiful games and willingness to share the best practices raise the bar for everyone.\nAbedalkareem Omreyh (game services), August, subhash279 (audioplayers), Marco Bavagnoli (Flutter SoLoud) and countless others who create essential packages: The foundation you provide is what makes complex and engaging games possible with Flutter.\nThis list barely scratches the surface of the talent in this community. To everyone we couldn‚Äôt name individually: your contributions are deeply appreciated, and you make Flutter a vibrant place for game development!\n\nMeanwhile, we would also like to extend our deepest thanks to our developers who have launched games using Flutter. Your creativity and passion inspire us to continue pushing the boundaries of what‚Äôs possible, making Flutter an even more powerful tool for developers worldwide.\n\nFlutter‚Äôs journey as a game development platform is just beginning. We‚Äôre committed to growing alongside the community, listening to your feedback, and building the tools you need.\n\nWe can‚Äôt wait to see what you build!"
}, {
  "id": 2,
  "title": "The 5 Must-Know Backend Frameworks in 2024",
  "thumbnailUrl": "https://res.cloudinary.com/daily-now/image/upload/f_auto,q_auto/v1/posts/1f1ea0b2f457364bcc5459e32f043c4a?_a=AQAEufR",
  "content": "Since 2009, Node.js has been stealing the spotlight, becoming the go-to choice for backend developers. With big players like Netflix and PayPal on board, it's like the rockstar of web development. ü§ò "
}, {
  "id": 3,
  "title": "Build a To-Do Application with React and Firebase",
  "thumbnailUrl": "https://res.cloudinary.com/practicaldev/image/fetch/s--kYbkut0R--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://res.cloudinary.com/dz4tt9omp/image/upload/v1674305970/banner.png",
  "content": "o-do applications are one of the ways you can use to manage a set of tasks. As developers, learning how to build a to-do application will also help to understand certain concepts one of which includes an understanding of how to build an application with a database.\n\nIn this article, you will learn how to build a to-do web app by making use of React.js and Firebase Database."
}, {
  "id": 4,
  "title": "Understand AI and Neural Networks by Manually Adjusting Parameters",
  "thumbnailUrl": "https://res.cloudinary.com/daily-now/image/upload/f_auto,q_auto/v1/posts/1576743413de87720fca0cd74d301980?_a=AQAEufR",
  "content": "A Data Scientist holds many responsibilities when working on a project, and one that is usually left until the last minute is documentation. Perhaps you‚Äôre diligent with writing docstrings for classes and functions (well done!) ‚Äî but should that be the resting place of your documentation?\n\nIn my opinion, documentation should sit independently from your code. Your team (or you in a few months time) shouldn‚Äôt have to trawl through hundreds of lines of code in your python modules to understand what‚Äôs going on. You can build beautiful, standardised and stylised documentation using just the docstrings in a few simple steps and make your project speak for itself.\n\nIn this article, I‚Äôll focus on using the Sphinx framework for autodocumenting python modules. I‚Äôll also be using the Cookiecutter Data Science project template in Visual Studio Code (VS Code) due to its seamless integration with Sphinx and standardised directory structure. Whilst the official sphinx tutorial documentation is a great resource for those wanting to take a deep dive into this topic, my aim for this article is to be a helpful ‚Äòquick start‚Äô guide to take you through the key steps. Enjoy :)\n\nA note on docstrings\nThe key to good documentation is docstrings. These are the comment blocks that sit within each class, class method and function that describe the nature of the code, along with the inputs, outputs and raised errors. There are three core docstring formats. These are Google, reStructuredText (reST) and NumPy. They all contain the same information, the only difference is that they are formatted differently. You can see examples of each docstring format here.\n\nI‚Äôll be using the Google docstring format as it is easy to read and takes up less space than the others. The below code block is a typical example of a Google docstring:\n\n\"\"\"Description of the function, class or method etc.\n\nArgs:\n    varA (str): Description of varA\n    varB (bool): Description of varB\n\nReturns:\n    list: Description of returned list\n\nRaises:\n    ValueError: Description of raised error\n\"\"\"\nTop tip. download the ‚ÄòautoDocstring ‚Äî Python Docstring Generator‚Äô in VS Code to automatically generate a docstring when you type three double quotation marks (i.e. the start of a docstring). Be sure to finish writing the function before generating the docstring so that all inputs/outputs/errors get included in the docstring template that gets generated for you!\n\nLet‚Äôs move on to making the documentation!"
  }, {
  "id": 5,
  "title": "Step by Step Basics: Code Autodocumentation",
  "thumbnailUrl": "https://miro.medium.com/v2/resize:fit:828/format:webp/0*8ygNBT0T0gWZD7Wi",
  "content": "A Data Scientist holds many responsibilities when working on a project, and one that is usually left until the last minute is documentation. Perhaps you‚Äôre diligent with writing docstrings for classes and functions (well done!) ‚Äî but should that be the resting place of your documentation?\n\nIn my opinion, documentation should sit independently from your code. Your team (or you in a few months time) shouldn‚Äôt have to trawl through hundreds of lines of code in your python modules to understand what‚Äôs going on. You can build beautiful, standardised and stylised documentation using just the docstrings in a few simple steps and make your project speak for itself.\n\nIn this article, I‚Äôll focus on using the Sphinx framework for autodocumenting python modules. I‚Äôll also be using the Cookiecutter Data Science project template in Visual Studio Code (VS Code) due to its seamless integration with Sphinx and standardised directory structure. Whilst the official sphinx tutorial documentation is a great resource for those wanting to take a deep dive into this topic, my aim for this article is to be a helpful ‚Äòquick start‚Äô guide to take you through the key steps. Enjoy :)\n\nA note on docstrings\nThe key to good documentation is docstrings. These are the comment blocks that sit within each class, class method and function that describe the nature of the code, along with the inputs, outputs and raised errors. There are three core docstring formats. These are Google, reStructuredText (reST) and NumPy. They all contain the same information, the only difference is that they are formatted differently. You can see examples of each docstring format here.\n\nI‚Äôll be using the Google docstring format as it is easy to read and takes up less space than the others. The below code block is a typical example of a Google docstring:\n\n\"\"\"Description of the function, class or method etc.\n\nArgs:\n    varA (str): Description of varA\n    varB (bool): Description of varB\n\nReturns:\n    list: Description of returned list\n\nRaises:\n    ValueError: Description of raised error\n\"\"\"\nTop tip. download the ‚ÄòautoDocstring ‚Äî Python Docstring Generator‚Äô in VS Code to automatically generate a docstring when you type three double quotation marks (i.e. the start of a docstring). Be sure to finish writing the function before generating the docstring so that all inputs/outputs/errors get included in the docstring template that gets generated for you!\n\nLet‚Äôs move on to making the documentation!"
},
{
  "id": 6,
  "title": "Advanced Features in Spring Boot and Spring RESTful Services",
  "thumbnailUrl": "https://res.cloudinary.com/daily-now/image/upload/f_auto,q_auto/v1/posts/86af42e7d444710ff55b5e27d3a7d254?_a=AQAEufR",
  "content": "In this article, we will cover advanced topics in the Spring framework, including Spring MVC, Spring Boot, and RESTful services. We will delve into various advanced concepts and techniques that will enhance your understanding and skills in working with these components.Advanced Spring MVC We will start by discussing advanced Spring MVC topics such as exception handling with @ExceptionHandler, integrating view technologies like Thymeleaf, and advanced data binding techniques."
}
]